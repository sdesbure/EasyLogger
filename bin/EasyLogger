#!/usr/bin/ruby -W0
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'EasyLogger_version'
require 'easy_logger'

include GLI

version EasyLogger::VERSION

desc 'View the line matching model and/or methods on a log file in command line'
long_desc <<EOS
This will display the lines of the log file matching the model and/or the method
in a command line .
If tail-mode is set, only the new lines matching will be displayed whereas if
file-mode is set, it will be only the the already logged lines matching that will 
be displayed. Without any of these options, both of them will be displayed.
EOS
arg_name 'log_file [command]'
command [:text] do |c|
  c.  desc 'tail-mode'
  c.long_desc 'if set, easy logger will show only the new lines'
  c.switch [:t, :tailmode]

  c.desc 'file-mode'
  c.long_desc <<EOS
if set, easy logger will sho only the matching past line of the file and exit.
if both file-mode and tail-mode is activated, file-mode will be chosen.
EOS
  c.switch [:f, :filemode]

  c.desc 'verbose'
  c.long_desc 'Switch to verbose mode where more outputs will be shown'
  c.switch [:v, :verbose]

  c.desc 'classe(s) to match'
  c.long_desc <<EOS 
The classe(s) to match in the log file. Can be mixed with method to match.
To put several classes, use a comma without space. Example -c Class1,Class2
EOS
  c.flag [:c, :class]

  c.desc 'method(s) to match'
  c.long_desc <<EOS 
The method(s) to match in the log file. Can be mixed with class to match.
To put several methods, use a comma without space. Example -m Method1,Method2
EOS
  c.flag [:m, :method]
  c.action do |g,o,args|
    if args.length < 1
      raise 'You must specify the name of the log file'
    end
    
    start_time = Time.now
    
    puts "Log file to look at: #{args[0]}" if o[:v]
    puts "  * Class to match: #{o[:c]}" if o[:v] && o[:c]
    puts "  * Method to match: #{o[:m]}" if o[:v] && o[:m]
    puts "  - Tail Mode activated" if o[:v] && o[:t] && !o[:f]
    puts "  - Tail Mode activated by command line but disabled by file-mode" if o[:v] && o[:t] && o[:f]
    puts "  - File Mode activated" if o[:v] && o[:f]
    o[:t] = false if (o[:t] && o[:f])
    unless o[:t] || o[:f]
      o[:t] = true 
      o[:f] = true 
    end
    
    easylog = EasyLogger::EasyLogger.new
    easylog.file(args[0],o[:c],o[:m],o[:v]) if o[:f]
    easylog.tail(args[0],  o[:c],o[:m],o[:v]) if o[:t]    
    puts " Line(s) processed in #{(Time.now - start_time).to_i} seconds" if o[:v]
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  true
end

post do |global,command,options,args|
  # Post logic here
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
